async add_driver_rating(request_data, user_id, callback){
            try{
                const rating_data = {
                    user_id: user_id
                };

                if(request_data.rating){
                    rating_data.rating = request_data.rating;
                }
                if(request_data.review){
                    rating_data.review = request_data.review;
                }
                if(request_data.order_id){
                    rating_data.order_id = request_data.order_id;
                }

                const findVehicle = `SELECT * from tbl_delivery_order where order_id = ? where status = 'completed' and delivery_status = 'delivered'`;
                const [vehicle_data] = await database.query(findVehicle, [rating_data.order_id]);
                const vehicle_id = vehicle_data[0].vehicle_id;

                const findDriver = `SELECT * from tbl_vehicle where vehicle_id = ?`;
                const [driver_data] = await database.query(findDriver, [vehicle_id]);

                const driver_id = driver_data[0].driver_id;
        
                const driverQuery = `SELECT * FROM tbl_driver WHERE driver_id = ?`;
                const [driverResult] = await database.query(driverQuery, [driver_id]);
        
                if (!driverResult || driverResult.length === 0) {
                    return callback(common.encrypt({
                        code: response_code.NOT_FOUND,
                        message: t('driver_not_found')
                    }));
                }
        
                const ratingQuery = `SELECT * FROM tbl_driver_rating WHERE driver_id = ? AND user_id = ?`;
                const [ratingResult] = await database.query(ratingQuery, [driver_id, user_id]);
        
                if (ratingResult.length > 0) {
                    return callback(common.encrypt({
                        code: response_code.ALREADY_EXISTS,
                        message: t('rating_already_exists')
                    }));
                }
        
                rating_data.driver_id = driver_id;
        
                const insertRating = `INSERT INTO tbl_driver_rating SET ?`;
                await database.query(insertRating, [rating_data]);
        
                return callback(common.encrypt({
                    code: response_code.SUCCESS,
                    message: t('rating_added_successfully')
                }));

            } catch(error){
                return callback(common.encrypt({
                    code: response_code.OPERATION_FAILED,
                    message: t('some_error_occurred'),
                    data: error.message
                }))
            }
        }